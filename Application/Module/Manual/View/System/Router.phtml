<div id="gird">
    <div class="inner">
        <div class="book-title"><h1>3.1 路由</h1></div>
        <hr>
        <div class="book-content">
            <div>
                <h2>System/Router</h2>
                本框架的路由配置分2种
                <h3>默认配置[/模块/控制器/操作]</h3>
                框架默认用的路由,不需要任何配置,例如地址栏输入http://mylocal/testa/testb/testc将匹配Testa模块下的
                Testb控制器下的testc操作..需要注意的是,test-c将匹配testC操作..
                <h3>支持正则匹配路由</h3>
                此种路由需要自己配置,可通过在config.php中配置或者直接调用router类的addRule方法<br>
                config.php
                <div class="code">
                    'route_rule' => array(
                    <div class="in_array">
                        array(array('user', 'index', 'index'), 'user/[:id]/[:name]', array('\d+', '\w+')),<br>
                    </div>
                    )
                </div>
                ------------------------------------------------------------------------------------------------------------------------------------------<br>
                events.php
                <div class="code">
                    function($e) {
                    <div class="in_array">
                        $e->getRouter()->addRule(array('user', 'index', 'index'), 'user/[:id]/[:name]', array('\d+', '\w+'));<br>
                    </div>
                    }
                </div>
                <p class="notice">需要注意的是如果在events.php中的match方法没有传入true参数,那么这个addrule就必须在route方法之前</p>
                以上路由可匹配user/123/tom,为防止变量污染,可控制器中getGet()获取匹配项的值,不可匹配user/tom/123,如果所有规则的
                正则表达式相同,第三个参数可使用字符串,如下例
                <div class="code">
                    $e->getRouter()->addRule(array('?module', '?controller', '?action'), '[:module]-[:controller]-[:action].html', '[a-z]+');
                    <span class="note">//在路由前加?为智能匹配模式,可通过url的参数来得出路由</span>
                </div>
                <p class="notice">module采用智能匹配模式需要在route方法之前或者module之后是有紧接着/,controller和action在match方法之前即可</p>
                <div class="code">
                    $e->getRouter()->addRule(array('?module', '?controller', '?action'), '[:module]-[:controller]-[:action].html', '[a-z]+');
                    <span class="note">//这种必须要在route方法之前添加规则或者在match的时候传入参数true</span>
                    <p class="note" style="margin-left: 0">//以下两种可以在route之后,需在match之前</p>
                    $e->getRouter()->addRule(array('?module', '?controller', '?action'), '[:module]/[:controller]-[:action].html', '[a-z]+');<br>
                    $e->getRouter()->addRule(array('user', '?controller', '?action'), 'user-[:controller]-[:action].html', '[a-z]+');<br>
                </div>
                因为在route之后会得到匹配模块,然后加载模块下events.php配置,所以必须保证模块被匹配到
            </div>
        </div>
    </div>
</div>
