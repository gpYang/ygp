<div id="gird">
    <div class="inner">
        <div class="book-title"><h1>3.3 控制器</h1></div>
        <hr>
        <div class="book-content">
            <div>
                框架中模型层的部署格式是Module/[:Module]/Controller/[:Controller]Controller,同一个模块下的逻辑类不能重名.
                例如index模块下的test控制器应该放置在Module/Index/TestController,test即为控制器名
                <h2>Module/Index/Controller/TestController.php</h2>
                <div class="code">
                    namespace Index;<br>
                    use System\Controller;<br>
                    class TestController extends Controller {
                    <p class="in_array">...</p>
                    }
                </div>
                操作名以Action为后缀,前缀以小写字母,如果为驼峰命名法,则在url中需要加入"-"分隔符
                <div class="code">
                    namespace Index;<br>
                    use System\Controller;<br>
                    class TestController extends Controller {
                    <div class="in_array">
                        public function testAction() {<span class="note">将匹配默认路由规则下的index/test/test</span>
                        <p class="in_array">...</p>
                        }<br>
                        public function testLoginAction() {<span class="note">将匹配默认路由规则下的index/test/test-login</span>
                        <p class="in_array">...</p>
                        }
                    </div>
                    }
                </div>
                <h3>返回参数判断视图已经视图使用数据</h3>
                直接返回给当前匹配视图
                <div class="code">
                    public function testAction() {<br>
                    <div class="in_array">
                        return array(<span class="note">//直接调用Index/Test/Test.phtml,并传递数据</span>
                        <p class="in_array">
                            'name' => 'tom',
                        </p>
                        );
                    </div>
                    }
                </div>
                ------------------------------------------------------------------------------------------------------------------------------------------<br>
                匹配其他视图
                <div class="code">
                    public function testAction() {<br>
                    <div class="in_array">
                        return $this->view(array('name' => 'tom'), 'index/index/index');<span class="note">//调用Index/Index/Index.phtml,并传递数据</span>
                    </div>
                    }
                </div>
                ------------------------------------------------------------------------------------------------------------------------------------------<br>
                不匹配视图(可用于返回json格式接口或者需要加载多个视图)
                <div class="code">
                    public function testAction() {<br>
                    <div class="in_array">
                        $this->cleanView();<span class="note">//为防止在事务管理器中加载过其他视图,可清除视图数据</span><br>
                        echo json_encode(array('test'));<br>
                        return false;
                    </div>
                    }<br>
                    public function testabcAction() {<br>
                    <div class="in_array">
                        $this->cleanView();<span class="note">//为防止在事务管理器中加载过其他视图,可清除视图数据</span><br>
                        $this->view(null, 'header', 'header');<br>
                        $this->view(null, 'main', 'main');<br>
                        $this->view(null, 'footer', 'footer');<br>
                        return false;
                    </div>
                    }
                </div>
                使用logic方法调用逻辑类,可调用其他模块下的逻辑类
                <div class="code">
                    $logic = $this->logic();<span class="note">//调用本模块下与控制器同名的逻辑类,本例中为Index/TestLogic</span><br>
                    $logic = $this->logic('index');<span class="note">//调用本模块下与其他控制器同名的逻辑类,本例中为Index/IndexLogic</span><br>
                    $logic = $this->logic('login/test');<span class="note">//调用Login/TestLogic</span>
                </div>
                调用模型类同调用逻辑类,方法名为model
                <div class="code">
                    $model = $this->model();<span class="note">//调用本模块下与控制器同名的模型类,本例中为Index/TestModel</span><br>
                    $model = $this->model('index');<span class="note">//调用本模块下与其他控制器同名的模型类,本例中为Index/IndexModel</span><br>
                    $model = $this->model('login/test');<span class="note">//调用Login/TestModel</span>
                </div>
                使用getGet方法获取路由正则匹配数据,参数为数据名<br>
                如array('user', 'index', 'index'), 'user/[:id]/[:name]', array('\d+', '\w+')这一个路由规则,我们访问user/123/tom
                <div class="code">
                    $this->getGet();<span class="note">//返回数组,id=>123,name=>tom</span><br>
                    $this->getGet('id');<span class="note">//返回字符串123</span>
                </div>
                使用layout方法开启或关闭layout模式,layout模式后面我们在<a href="manual/system-view.phtml">3.6 视图层</a>中说明
                <div class="code">
                    $this->layout();<span class="note">//关闭layout模式,可随意加载视图</span><br>
                    $this->layout('layout');<span class="note">//开启layout模式,并指定layout视图为Layout/Layout.phtml</span><br>
                </div>
                使用getEvent方法得到事务管理器
                <div class="code">
                    $event = $this->getEvent();
                </div>
            </div>
        </div>
    </div>
</div>
